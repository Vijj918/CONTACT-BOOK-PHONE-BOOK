import tkinter as tk
from tkinter import ttk, messagebox

class Contact:
    def __init__(self, name, phone, email, address):
        self.name = name
        self.phone = phone
        self.email = email
        self.address = address

class ContactManagerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Contact Manager")
        self.root.geometry("600x400")

        self.contacts = []

        self.name_var = tk.StringVar()
        self.phone_var = tk.StringVar()
        self.email_var = tk.StringVar()
        self.address_var = tk.StringVar()

        self.label_name = ttk.Label(root, text="Name:")
        self.label_name.grid(row=0, column=0, padx=10, pady=10)
        self.entry_name = ttk.Entry(root, textvariable=self.name_var)
        self.entry_name.grid(row=0, column=1, padx=10, pady=10)

        self.label_phone = ttk.Label(root, text="Phone:")
        self.label_phone.grid(row=1, column=0, padx=10, pady=10)
        self.entry_phone = ttk.Entry(root, textvariable=self.phone_var)
        self.entry_phone.grid(row=1, column=1, padx=10, pady=10)

        self.label_email = ttk.Label(root, text="Email:")
        self.label_email.grid(row=2, column=0, padx=10, pady=10)
        self.entry_email = ttk.Entry(root, textvariable=self.email_var)
        self.entry_email.grid(row=2, column=1, padx=10, pady=10)

        self.label_address = ttk.Label(root, text="Address:")
        self.label_address.grid(row=3, column=0, padx=10, pady=10)
        self.entry_address = ttk.Entry(root, textvariable=self.address_var)
        self.entry_address.grid(row=3, column=1, padx=10, pady=10)

        self.add_button = ttk.Button(root, text="Add Contact", command=self.add_contact)
        self.add_button.grid(row=4, column=0, columnspan=2, pady=10)

        self.contact_listbox = tk.Listbox(root, selectmode=tk.SINGLE)
        self.contact_listbox.grid(row=0, column=2, rowspan=5, padx=10, pady=10)

        self.populate_contact_listbox()

        self.view_button = ttk.Button(root, text="View Contact", command=self.view_contact)
        self.view_button.grid(row=5, column=0, columnspan=2, pady=10)

        self.search_var = tk.StringVar()
        self.search_entry = ttk.Entry(root, textvariable=self.search_var)
        self.search_entry.grid(row=6, column=0, padx=10, pady=10)

        self.search_button = ttk.Button(root, text="Search", command=self.search_contact)
        self.search_button.grid(row=6, column=1, pady=10)

        self.update_button = ttk.Button(root, text="Update Contact", command=self.update_contact)
        self.update_button.grid(row=7, column=0, columnspan=2, pady=10)

        self.delete_button = ttk.Button(root, text="Delete Contact", command=self.delete_contact)
        self.delete_button.grid(row=8, column=0, columnspan=2, pady=10)

    def add_contact(self):
        name = self.name_var.get()
        phone = self.phone_var.get()
        email = self.email_var.get()
        address = self.address_var.get()

        if name and phone:
            contact = Contact(name, phone, email, address)
            self.contacts.append(contact)
            self.populate_contact_listbox()
            self.clear_entry_fields()
        else:
            messagebox.showwarning("Warning", "Name and Phone are required.")

    def populate_contact_listbox(self):
        self.contact_listbox.delete(0, tk.END)
        for contact in self.contacts:
            self.contact_listbox.insert(tk.END, contact.name)

    def view_contact(self):
        selected_index = self.contact_listbox.curselection()
        if selected_index:
            selected_contact = self.contacts[selected_index[0]]
            messagebox.showinfo("Contact Information", f"Name: {selected_contact.name}\nPhone: {selected_contact.phone}\nEmail: {selected_contact.email}\nAddress: {selected_contact.address}")
        else:
            messagebox.showwarning("Warning", "Please select a contact.")

    def search_contact(self):
        search_term = self.search_var.get().lower()
        results = [contact for contact in self.contacts if search_term in contact.name.lower() or search_term in contact.phone.lower()]
        
        self.contact_listbox.delete(0, tk.END)
        for contact in results:
            self.contact_listbox.insert(tk.END, contact.name)

    def update_contact(self):
        selected_index = self.contact_listbox.curselection()
        if selected_index:
            selected_contact = self.contacts[selected_index[0]]
            selected_contact.name = self.name_var.get()
            selected_contact.phone = self.phone_var.get()
            selected_contact.email = self.email_var.get()
            selected_contact.address = self.address_var.get()

            self.populate_contact_listbox()
            self.clear_entry_fields()
        else:
            messagebox.showwarning("Warning", "Please select a contact.")

    def delete_contact(self):
        selected_index = self.contact_listbox.curselection()
        if selected_index:
            del self.contacts[selected_index[0]]
            self.populate_contact_listbox()
            self.clear_entry_fields()
        else:
            messagebox.showwarning("Warning", "Please select a contact.")

    def clear_entry_fields(self):
        self.name_var.set("")
        self.phone_var.set("")
        self.email_var.set("")
        self.address_var.set()

if __name__ == "__main__":
    root = tk.Tk()
    app = ContactManagerApp(root)
    root.mainloop()
